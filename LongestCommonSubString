
public class CommonSubString
{ 
	static String LCSubStr(String X, String Y) { 
	int m = X.length(); 
	int n = Y.length(); 
	// Variable to store length of longest 
		// common subString. 
		int result = 0; 

		// Variable to store ending point of 
		// longest common subString in X. 
		int end = 0; 

		// Matrix to store result of two 
		// consecutive rows at a time. 
		int len[][] = new int[2][m]; 

		// Variable to represent which row of 
		// matrix is current row. 
		int currRow = 0; 

		// For a particular value of i and j, 
		// len[currRow][j] stores length of longest 
		// common subString in String X[0..i] and Y[0..j]. 
		for (int i = 0; i <= m; i++)
		{ 
			for (int j = 0; j <= n; j++)
			{ 
				if (i == 0 || j == 0) 
				{ 
					len[currRow][j] = 0; 
				} 
				else if (X.charAt(i - 1) == Y.charAt(j - 1)) 
				{ 
					len[currRow][j] = len[1 - currRow][j - 1] + 1;
					
					if (len[currRow][j] > result)
					{ 
						result = len[currRow][j]; 
						end = i - 1; 
					} 
				} 
				else
				{ 
					len[currRow][j] = 0; 
				} 
			} 
			// Make current row as previous row and 
			// previous row as new current row. 
			currRow = 1 - currRow; 
		} 

		// If there is no common subString, print -1. 
		if (result == 0) 
		{ 
			return "-1"; 
		} 

		// Longest common subString is from index 
		// end - result + 1 to index end in X. 
		return X.substring(end - result + 1, result); 
	} 
	
	// Driver Code 
	public static void main(String[] args) { 
		String X = "GeeksforGeeks"; 
		String Y = "GeeksQuiz"; 
		// function call 
		System.out.println(LCSubStr(X, Y)); 

	} 

} 


